#!/bin/bash

set -euo pipefail

JOB_TYPE=$1  # Type of bench: io | cpu
JOBS_COUNT=$2

echo
echo "**********************************"
echo "* BENCHMARKS FOR JOB TYPE: $JOB_TYPE"
echo "* ACTUAL LOAD: $JOBS_COUNT jobs"
echo "**********************************"

# Use the script's directory to source the other scripts
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

. "$SCRIPT_DIR/batch_spinner.sh"
. "$SCRIPT_DIR/batch_clean.sh"
. "$SCRIPT_DIR/batch_enqueue.sh"
. "$SCRIPT_DIR/batch_duration.sh"
. "$SCRIPT_DIR/batch_resource_report.sh"
. "$SCRIPT_DIR/batch_resource_avg.sh"

THREADS=5
QUEUES_COUNT=8

# ==========================================
# Batch with 1 process + 8 queues + 5 threads
# ==========================================
echo
echo "==========================================="
echo "Batch with 1 process + 8 queues + 5 threads"
echo "==========================================="

bundle exec que --worker-count "$THREADS" \
  -q queue_0 -q queue_1 -q queue_2 -q queue_3 -q queue_4 -q queue_5 -q queue_6 -q queue_7 \
  --poll-interval 0.1 > /dev/null 2>&1 &
JOB_PIDS[0]=$!

declare -a CPU_SAMPLER_PIDS
monitor_cpu_usage_dynamic CPU_SAMPLER_PIDS "${JOB_PIDS[@]}"

show_spinner_clean_batch
show_spinner_enqueue_jobs "$JOB_TYPE" "$QUEUES_COUNT" "$JOBS_COUNT"
show_spinner_until_jobs_complete "$JOBS_COUNT"

kill "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true
wait "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true

show_batch_duration
show_avg_peak_memory_mb "${JOB_PIDS[@]}"
show_avg_monitor_cpu_usage "${JOB_PIDS[@]}"

kill "${JOB_PIDS[@]}" 2>/dev/null || true
wait "${JOB_PIDS[@]}" 2>/dev/null || true

# ==========================================
# Batch with 2 process + 8 queues + 5 threads
# ==========================================
echo
echo "==========================================="
echo "Batch with 2 process + 8 queues + 5 threads"
echo "==========================================="

for i in {0..1}; do
  bundle exec que --worker-count "$THREADS" \
    -q queue_0 -q queue_1 -q queue_2 -q queue_3 -q queue_4 -q queue_5 -q queue_6 -q queue_7 \
    --poll-interval 0.1 > /dev/null 2>&1 &
  JOB_PIDS[$i]=$!
done
echo "JOB_PIDS: ${JOB_PIDS[@]}"

declare -a CPU_SAMPLER_PIDS
monitor_cpu_usage_dynamic CPU_SAMPLER_PIDS "${JOB_PIDS[@]}"

show_spinner_clean_batch
show_spinner_enqueue_jobs "$JOB_TYPE" "$QUEUES_COUNT" "$JOBS_COUNT"
show_spinner_until_jobs_complete "$JOBS_COUNT"

kill "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true
wait "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true

show_batch_duration
show_avg_peak_memory_mb "${JOB_PIDS[@]}"
show_avg_monitor_cpu_usage "${JOB_PIDS[@]}"

kill "${JOB_PIDS[@]}" 2>/dev/null || true
wait "${JOB_PIDS[@]}" 2>/dev/null || true


# ==========================================
# Batch with 4 process + 8 queues + 5 threads
# ==========================================
echo
echo "==========================================="
echo "Batch with 4 process + 8 queues + 5 threads"
echo "==========================================="

for i in {0..3}; do
  bundle exec que --worker-count "$THREADS" \
    -q queue_0 -q queue_1 -q queue_2 -q queue_3 -q queue_4 -q queue_5 -q queue_6 -q queue_7 \
    --poll-interval 0.1 > /dev/null 2>&1 &
  JOB_PIDS[$i]=$!
done
echo "JOB_PIDS: ${JOB_PIDS[@]}"

declare -a CPU_SAMPLER_PIDS
monitor_cpu_usage_dynamic CPU_SAMPLER_PIDS "${JOB_PIDS[@]}"

show_spinner_clean_batch
show_spinner_enqueue_jobs "$JOB_TYPE" "$QUEUES_COUNT" "$JOBS_COUNT"
show_spinner_until_jobs_complete "$JOBS_COUNT"

kill "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true
wait "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true

show_batch_duration
show_avg_peak_memory_mb "${JOB_PIDS[@]}"
show_avg_monitor_cpu_usage "${JOB_PIDS[@]}"

kill "${JOB_PIDS[@]}" 2>/dev/null || true
wait "${JOB_PIDS[@]}" 2>/dev/null || true


# ==========================================
# Batch with 8 process + 8 queues + 5 threads
# ==========================================
echo
echo "==========================================="
echo "Batch with 8 process + 8 queues + 5 threads"
echo "==========================================="

for i in {0..7}; do
  bundle exec que --worker-count "$THREADS" \
    -q queue_0 -q queue_1 -q queue_2 -q queue_3 -q queue_4 -q queue_5 -q queue_6 -q queue_7 \
    --poll-interval 0.1 > /dev/null 2>&1 &
  JOB_PIDS[$i]=$!
done
echo "JOB_PIDS: ${JOB_PIDS[@]}"

declare -a CPU_SAMPLER_PIDS
monitor_cpu_usage_dynamic CPU_SAMPLER_PIDS "${JOB_PIDS[@]}"

show_spinner_clean_batch
show_spinner_enqueue_jobs "$JOB_TYPE" "$QUEUES_COUNT" "$JOBS_COUNT"
show_spinner_until_jobs_complete "$JOBS_COUNT"

kill "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true
wait "${CPU_SAMPLER_PIDS[@]}" 2>/dev/null || true

show_batch_duration
show_avg_peak_memory_mb "${JOB_PIDS[@]}"
show_avg_monitor_cpu_usage "${JOB_PIDS[@]}"

kill "${JOB_PIDS[@]}" 2>/dev/null || true
wait "${JOB_PIDS[@]}" 2>/dev/null || true
